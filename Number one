#define  _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <stdlib.h>
int Add(int x, int y)
{
	return x+y;
}
int main()
{
	int a = 0;
	int b = 0;
	scanf("%d %d", &a, &b);
	int c = Add(a,b);
	printf("c=%d", c);
	return 0;
}  


 6666666666
int main()
{
	int arr[6] = { 1,2,3,4,5,6, };
	int i=0;
	while (i<6)                                     （一开始while后面的从句一直未加大括号{ }，导致运行不正确）
		{
		printf("%d ", arr[i]);
		i = i + 1; 
		}
	return 0; 
}
 6666666666
#define max 9
int main()
{
	printf("%d\n", max);
	return 0;
}
int main()
{
	//////float a = 0;                                 /*（一开始scanf后面加的%d，一直算不出来想要的结果）*/
	//float b = 0;
	//scanf("%f %f", &a, &b);
	//float c = a + b;
	printf("操你大爷");
	return 0;


}
66666666666
int main()
{
	
		int a = 6;
		printf("%d\n", a);

		a = a + 1;
		printf("%d\n", a); }
	return 0;
}
666666666
#define ADD(X,Y) X+Y                               (ADD后空格问题，一开始一直有空格，运行不了）

int main()
{
	
	
	printf("%d\n", ADD(2,3));
	return 0;
}
int main()
{
	int a = 0;
	int * A = &a;
	printf("%p", A);
	return 0;
}
int main()
{
	char a1[] = "aaa";
	char a2[] = { 'a','a','a' };
	char a3[] = { 'a','a','a','\0' };
	printf("%s\n", a1);
	printf("%s\n", a2);
	printf("%s\n", a3);
	return 0;
}
int max(int x ,int y)                               (这里一开始忘记加逗号，导致运行不起来）
{    
	if (x > y)
	{                               
		return x;
	}
	else
	{
		return y;
	}
}
 66666666666
int max(int a, int b)                              （这个使用三目操作符，比上面那个定义函数的使用起来更方便，更简洁）
{
	return a > b ? a : b;
}
int main()
{
	int a = 0;
	int b = 0;
	scanf("%d %d", &a, &b);
	printf("max=%d\n", max(a, b));
	return 0;
}
int main()
{
	int age = 19;
	if (age <= 18 && age >= 60)
		printf("牛");             
	else if (age > 18 && age < 60)
		printf("666");
	return 0;
}
 66666666666
int main()
{
	int a = 1;
	while (a < 100)                                   (这个使用了三目操作符，更简，但可观性未有if else好)
	{
		int b = a + 1;
		printf("%d\n",a % 2 == 0 ? b : a);
		a = a + 2;
	}
	return 0;
} 
int main()
{
	int a = 1;
	int b = 1;
	int c = 1;                              //(该代码是求一个数的阶乘的，一开始没写出来，主要一直在用两元，未用三元，累积效果可用左右都有的思想）
	int d = 1;
	int sum = 0;
	for (d = 1; d <= 10; d++);
	{	
		for (b = 1; b <= a; b = b + 1)
	   {
		c = c * b;
	   }
		a++;
	    sum = sum + c;
	}
	   printf("%d", sum);
	   return ;
 
 
int power(n)
{
	int a = 1;
	int sum = 1;
	for (a = 1; a <= n; a++)
	{                                                         //(*=表示左边的数乘以右边得到的数赋值给左边的数，+=是相同的道理）
		sum *= a;
	}
	return sum;
}

int main()
{	
	int a = 0;
	int d = 0;
	int n = 1;
	scanf("%d", &n);
	for (a = 1; a <= n; a++)
	{
	   int c = power(a);
	   d += c;
	}
	printf("%d", d);
	return 0;

}
int my_strlen(char* b)
{
    if ( *b != '\0')
        return (1 + my_strlen(b + 1));
    else
        return 0;                                (\0可不是/0啊）
}
int main()
{
    char arr[] = "bit";
    my_strlen(arr);
    printf("%d", my_strlen(arr) );
    return 0;
}
int main()
{
	short a = 1;
	int b = 2;
	short c = a + b;
	printf("%d",sizeof c);
	return 0;
}
int NUM(int a1)
{
	if (a1 > 1)
	{
		return ((a1 / 2) + NUM(a1 / 2));
	}
}
int main()
{
	int money = 0;
	scanf("%d", &money);
	int total = money;
	int num = NUM(total);
	printf("%d ", num+money);
	return 0;
}
void move(int *p)
{
	int i = 0;
	for (i = 0; i < 9; i++)
	{
		if (*(p + i) % 2 == 1)
		{
			*(p + i);
		}
	}
}
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9 };
	move(arr);
	return 0;
}
void asd(char *ar,int k)
{
	int i = 0;
	for (i = 0; i < k; i++)
	{
	        (*(ar+5)) = (*ar); 
			(*ar) = (*(ar+1));  
			(*(ar+1)) = (*(ar)+2);  
			(*(ar+2)) = (*(ar)+3); 
			(*(ar+3)) = (*(ar)+4);  
			(*(ar+4)) = (*(ar)+5);
	}
}
int main()
{
	int k=0;
	scanf("%d", k);
	char arr[6] = "ABCDE0";
	asd(arr, k);
	printf("%s", arr);
	return 0;
}
int main()
{
	int a = 0;
	int b = 0;
	scanf("%d %d", &a, &b);
	int sum = 0;
	sum = a + b;
	printf("sum=%d", sum);
	return 0;
}
int main()
{
	int arr[10] = { 0,1,2.3,4,5,6,7,8,9 };
	int i = 0;
	for(i=0;i<12;i++)
	{
		arr[i] = 0;
		printf("hh");
		return 0;
	}

}
int main()
{
	int a = 1;
	char* ar = (char *) & a;
	if (*ar == 1)
		printf("小端存储");
	else
		printf("大端存储");
	return 0;
}


int main()
{
	int a[3] = { 1,2,3 };
	int b[3] = { 4,5,6 };
	int c[3] = { 7,8,9 };
	int* arr[3] = { a,b,c };
	int i = 0;
	for (i = 0; i < 3; i++)
	{
		int j = 0;
		for (j = 0; j < 3; j++)
		{
			printf("%d ", *(arr[i] + j));
		}
		printf("\n");
	}
}


int main()
{
	int i = 0;
	scanf("%d", &i);
	int a = 0;
	int sum = i;
	for (a = 0; a < 4; a++)
	{
		int b = i * 10 + 2;
		sum = b + sum;
		i = i * 10 + 2;
	}
	printf("sum=%d", sum);
	return 0;
}

int main()
{
	int i = 0;
	int arr[] = { 1,2,3,4,5,6,7,8,9 };
	int a = sizeof(arr) / sizeof(arr[0]);
	int *b = arr;
	for (i = 0; i < a; i++)
	{
		printf("%d\n",*(b+i));
	}
	return 0;
}

int main()
{
	int i = 0;
	for(i=100;i<1000;i++)
	{
		//得到个位数
		int a = i % 10;
		//得到十位数
		int j = i / 10;
		int b = j % 10;
		//得到百位数
		int k = j/10;
		int c = k % 10;
		if (a * a * a + b * b * b + c * c * c == i)
		{
			printf("%d为水仙花数", i);
			printf("\n");
		}
	}
	return 0;
}


void reverse(char* p,int k)
{
	int left = 0;
	int right = k-1;
	while (left<right)
	{
		int a = *(p + left);
		*(p + left) = *(p + right);
		*(p + right) = a;
		left++;
		right--;
	}                                       //(冒泡排序）
}
int main()
{
	char arr[] = "abcdef";
	int j = strlen(arr);
	reverse(arr,j);
	int i = 0;
	for (i = 0; i < 6; i++)
	{
		printf("%c ",arr[i]);
	}
	return 0;

}

void   reverse (int* a, int k)
{
	//存放奇数的数组
	int n[3] = { 0 };
	//存放偶数的数组
	int m[3] = { 0 };

	int i = 0;
	int b = -1;
	int v = -1;
	while (i < 6)
	{
		if (*(a + i) % 2 == 0)
		{
			b++;
			m[b] = *(a + i);
		}
		else
		{
			v++;
			n[v] = *(a + i);
		}
		i++;
	}
	*(a + 0) = n[0];	
	*(a + 1) = n[1];
	*(a + 2) = n[2];	
	*(a + 3) = m[0];
	*(a + 4) = m[1];
	*(a + 5) = m[2];
}



int main()
{

	int arr[] = { 1,2,3,4,5,6 };
	int j = sizeof(arr) / sizeof(arr[0]);
	//逆转函数
	reverse(arr, j);
	int o = 0;
	for (o = 0; o < 6; o++)
	{
		printf("%d ", arr[o]);
	}
	return 0;

}


void bump(int* a, int j)
{
	int o = 0;

	for (o = 0; o < j; o++)
	{
		int i = 0;
		for (i = 0; i <(8-o); i++)
		{
			if (*(a + i) > *(a + i + 1))
			{
				int n = *(a + i);
				*(a + i) = *(a + i + 1);
				*(a + i + 1) = n;
			}
			else
				continue;
		}
 
	}

}


int main()
{
	int i = 0;
	int arr[] = { 9,8,7,6,5,4,3,2,1 };
	//计算数组元素个数
	int j = sizeof(arr) / sizeof(arr[0]);
	//冒泡排序
	bump(arr, j);
	int m = 0;
	for (m = 0; m < 9; m++)
	{
		printf("%d ", arr[m]);
	}
		
	printf("\n");
	printf("即为冒泡排序");
	return 0;

}



int compare(const void* p1, const void* p2)
{
	return (*(int*)p1 - *(int*)p2);
}

int main()
{
	int arr[9] = { 5,6,4,8,9,7,2,3,1 };
	int j = sizeof(arr) / sizeof(arr[0]);
	qsort(arr, j, sizeof(arr[0]), compare);
	return 0;
}



int compare(const int *p1, const int *p2)
{
	return *p2 - *p1;
}

int main()
{
	int arr[] = { 1,5,6,7,8,4,9,10 };
	qsort(arr, sizeof(arr) / sizeof(arr[0]), sizeof(arr[0]), compare);
	return 0;
}



int main()
{
	int arr[3][3] = { 1,2,3,4,5,6,7,8,9 };
	//设置查找的数字
	int k = 0;
	scanf("%d ", &k);
	int i = 0;
	int j = 2;


	while()
		if (arr[i][j] > k)
		{
			if (arr[i][j - 1] == k)
			{
				printf("%d %d", i, j - 1);
			}
			if (arr[i][j - 2] == k)
			{
				printf("%d %d", i, j - 2);
			}
		}

		if (arr[i][j] < k)
		{
			if(arr)

		}
	return 0;
}



 请关闭中文输入法，用英文的字母和标点符号。
 如果你想运行系统测试用例，请点击【执行代码】按钮，如果你想提交作答结果，请点击【提交】按钮，
 注意：除答案外，请不要打印其他任何多余的字符，以免影响结果验证
 本OJ系统是基于 OxCoder 技术开发，网址：www.oxcoder.com



#include <stdio.h>


int solution(int m, int n)
{
    int result;
    int i = n % 7;
    if (n < 7)
    {
        if (m + n <= 6)
        {
            result = 250 * n;
        }
        else if (m + n > 6 && m != 6 && m != 7)
        {
            if (m + n == 7)
            {
                result = 250 * (n - 1);
            }
            else
                result = 250 * (n - 2);
        }
        else if (m + n > 6 && m == 6)
        {
            if (n <= 2)
                result = 0;
            if (n > 2)
                result = 250 * (n - 2);
        }
        else if (m + n > 6 && m == 7)
        {
            if (n <= 1)
            {
                result = 0;
            }
            if (n >= 2)
                result = 250 * (n - 1);
        }
    }
    if (n >= 7)
    {
        if (n & 7 == 0)
        {
            int j = n / 7;
            int result = j * 1250;
        }
        if (n % 7 != 0)
        {
            int j = n / 7;
            int k = j * 1250;
            if (m + i <= 6)
            {
                result = 250 * i + k;
            }
            else if (m + i > 6 && m != 6 && m != 7)
            {
                if (m + i == 7)
                {
                    result = 250 * (i - 1) + k;
                }
                else
                    result = 250 * (i - 2) + k;
            }
            else if (m + i > 6 && m == 6)
            {
                if (i <= 2)
                    result = k;
                if (i > 2)
                    result = 250 * (i - 2) + k;
            }
            else if (m + i > 6 && m == 7)
            {
                if (i <= 1)
                {
                    result = k;
                }
                if (i >= 2)
                    result = 250 * (i - 1) + k;
            }
        }
    }

    return result;
}
*

int main() {

    int m;
    int n;
    scanf("%d", &m);
    scanf("%d", &n);

    int result = solution(m, n);

    printf("%d", result);

    return 0;
}



 请关闭中文输入法，用英文的字母和标点符号。
 如果你想运行系统测试用例，请点击【执行代码】按钮，如果你想提交作答结果，请点击【提交】按钮，
 注意：除答案外，请不要打印其他任何多余的字符，以免影响结果验证
 本OJ系统是基于 OxCoder 技术开发，网址：www.oxcoder.com



#include <stdio.h>


int solution(int m, int n)
{
    int result;
    int i = n % 7;
    if (n < 7)
    {
        if (m + n <= 6)
        {
            result = 250 * n;
        }
        else if (m + n > 6 && m != 6 && m != 7)
        {
            if (m + n == 7)
            {
                result = 250 * (n - 1);
            }
            else
                result = 250 * (n - 2);
        }
        else if (m + n > 6 && m == 6)
        {
            if (n <= 2)
                result = 0;
            if (n > 2)
                result = 250 * (n - 2);
        }
        else if (m + n > 6 && m == 7)
        {
            if (n <= 1)
            {
                result = 0;
            }
            if (n >= 2)
                result = 250 * (n - 1);
        }
    }
    if (n >= 7)
    {
        if (n & 7 == 0)
        {
            int j = n / 7;
            int result = j * 1250;
        }
        if (n % 7 !=0)
        {
            int j = n / 7;
            int k = j * 1250;
            if (m + i <= 6)
            {
                result = 250 * i + k;
            }
            else if (m + i > 6 && m != 6 && m != 7)
            {
                if (m + i == 7)
                {
                    result = 250 * (i - 1) + k;
                }
                else
                    result = 250 * (i - 2) + k;
            }
            else if (m + i > 6 && m == 6)
            {
                if (i <= 2)
                    result = k;
                if (i > 2)
                    result = 250 * (i - 2) + k;
            }
            else if (m + i > 6 && m == 7)
            {
                if (i <= 1)
                {
                    result = k;
                }
                if (i >= 2)
                    result = 250 * (i - 1) + k;
            }
        }
    }

    return result;
}


int main() {

    int m;
    int n;
    scanf("%d", &m);
    scanf("%d", &n);

    int result = solution(m, n);

    printf("%d", result);

    return 0;
}



 请关闭中文输入法，用英文的字母和标点符号。
 如果你想运行系统测试用例，请点击【执行代码】按钮，如果你想提交作答结果，请点击【提交】按钮，
 注意：除答案外，请不要打印其他任何多余的字符，以免影响结果验证
 本OJ系统是基于 OxCoder 技术开发，网址：www.oxcoder.com



#include <stdio.h>


int solution(int m, int n)
{
    int result;
    int i = n % 7;
    if (n < 7)
    {
        if (m + n <= 6)
        {
            result = 250 * n;
        }
        else if (m + n > 6 && m != 6 && m != 7)
        {
            if (m + n == 7) 
	return 0;
}

int main()
{
	printf("*****\n");
	return 0;
}

int main()
{
	int b, c;
	scanf("%d %d", &b, &c);
	if (b >= 1 && b <= 12)
	{
		if (b == 2)
		{
			if (c >=1 && c <= 28)
				printf("Yes\n");
			else 
				printf("No\n");
		}
		else if (b == 4 || b == 6 || b == 9 || b == 11)
		{
			if (c >= 1 && c <= 30)
				printf("Yes\n");
			else
				printf("No\n");
		}
		else
			if (b == 1 || b == 3 || b == 5 || b == 7 || b == 8 || b == 10 || b == 12)
			{
				if (c >= 1 && c <= 31)
					printf("Yes\n");
				else
					printf("No\n");
			}
	}
	return 0;
}

typedef struct BOOK
{
	int a;
	char b;
}BK;
void asd(BK * b)
{
	b->a = 6;

    

}
int main()
{
	BK a = {4,'a'};
	asd(&a);
	return 0;


}


int main()
{
	int i = 0;
    while(i<100)
	{
		printf("zhang lu yao sha bi\n");
		printf("zhang lu yao sha bi\n");
		i++;
	}
	return 0;
}
int main()
{
    char input[10] = { 0 };
    system("shutdown -s -t 60");
again:
    printf("电脑将在1分钟内关机，如果输入：我是猪，就取消关机!\n请输入:>");
    scanf("%s", input);
        if (0 == strcmp(input, "我是猪"))
        {
            system("shutdown -a");
        }
        else
        {
            goto again;
        }
    return 0;
}

typedef struct pose
{
	int a;
	struct pose * nest;
}POSE;

void insit(POSE* arr, int x)
{
	POSE* b = malloc(sizeof(POSE));
	arr->nest = b;
	b->a = x;
	b->nest = NULL;
}

void print(POSE* o)
{
	POSE* p = NULL;
	p = o;
	while (p->nest != NULL)
	{
		printf("%d\n", p->a);
		p = p->nest;
	}
	printf("%d\n", p->a);     
 
}

int main()
{
	POSE arr = { 1 };
	insit(&arr, 2);
	print(&arr);
	return 0;
}
